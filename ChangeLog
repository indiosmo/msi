Thu Oct  9 02:17:23 UTC 2014 Luiz Siqueira <indiosmo@gmail.com>

        * libs/mpc/qfix.mpb:

          QuickFIX dependency base.

        * resources/FIX44_UMDF.xml:

          FIX Dictionary for UMDF recovery sessions.

        * setenv.bat:

          Add QUICKFIX_ROOT variable.

        * msi/umdf/recovery:
        * libs/umdf/recovery:

          New recovery library.

        * libs/msi.mwc:

          Add umdf_recovery project.

        * libs/umdf/receiver/build/umdf_receiver.mpc:
        * libs/umdf/receiver/build/umdf_receiver_test.mpc:
        * libs/umdf/ticker_plant/build/umdf_ticker_plant_test.mpc:

          Add umdf_recovery dependency.

        * libs/umdf/receiver/src/receiver.cpp:
        * libs/umdf/receiver/src/sequencing_machine.cpp:
        * libs/umdf/receiver/test/test_event_handler_performance.cpp:
        * libs/umdf/receiver/test/test_state_machine.cpp:
        * libs/umdf/ticker_plant/test/test_ticker_plant.cpp:
        * msi/umdf/receiver/events.hpp:
        * msi/umdf/receiver/receiver.hpp:
        * msi/umdf/receiver/sequencing_machine.hpp:

          Adjust to use the new recovery library.

        * libs/umdf/receiver/src/null_recovery_service.cpp:
        * msi/umdf/receiver/null_recovery_service.hpp:
        * msi/umdf/receiver/recovery_service.hpp:

          Removed these files.

Wed Oct  8 23:51:53 UTC 2014 Luiz Siqueira <indiosmo@gmail.com>

        * libs/umdf/decoder/quickfast/test/incremental_builder_test.cpp:

          Add performance test.

Thu Sep 18 00:54:35 UTC 2014 Luiz Siqueira <indiosmo@gmail.com>

        * libs/concepts/src/test_template_handler.cpp:
        * libs/marketdata/common/test/test_marketdata_common.cpp:

          Remove getchar() from test.

        * msi/marketdata/common/receiver.hpp:
        * libs/marketdata/common/src/receiver.cpp:

          Make register_on_receive_callback pure virtual.
          Remove on_receive_ member.

        * libs/network/src/multicast_receiver.cpp:

          stop() return on !running, instead of testing for running.
          This is to follow convention.

        * msi/umdf/receiver/null_recovery_service.hpp:
        * libs/umdf/receiver/src/null_recovery_service.cpp:

          Null implementation of a recovery_service interface.

        * msi/umdf/receiver/sequencing_machine.hpp:
        * libs/umdf/receiver/src/sequencing_machine.cpp:

          New architecture.

        * msi/umdf/receiver/receiver.hpp:
        * libs/umdf/receiver/src/receiver.cpp:
        * libs/umdf/receiver/test/test_event_handler_performance.cpp:
        * libs/umdf/receiver/test/test_state_machine.cpp:
        * libs/umdf/ticker_plant/test/test_ticker_plant.cpp:

          Adapt receiver to the new FSM model.

        * msi/byte_conversion.hpp:

          Add be_to_uint16() function.

        * msi/event.hpp:

          Change operator()(Args...) to (const Args&...).

        * msi/umdf/decoder/quickfast/umdf_decoder_quickfast_pch.hpp:

          Disable warning 4503 (name length exceeded).
          Boost MSM will generate lots of it.

        * msi/umdf/receiver/channel_type.hpp:

          Channel types used by the sequencer.

        * msi/umdf/receiver/events.hpp:

          Events used in the sequencing FSM.

        * msi/umdf/receiver/header.hpp:

          Add default ctor.

        * msi/umdf/receiver/receiver_error.hpp:

          Enumeration of errors generated by the receiver.

        * msi/umdf/receiver/recovery_service.hpp:

          Add virtual destructor.

          Add pure virtuals connect(), disconnect() and request_recovery().

          Use new event template instead of std::function for callbacks.

        * libs/umdf/receiver/src/event_handler.cpp:
        * libs/umdf/receiver/src/events.cpp:
        * libs/umdf/receiver/src/header_interpreter.cpp:
        * libs/umdf/receiver/src/receiver_machine.cpp:
        * libs/umdf/receiver/src/recovery_service.cpp:
        * libs/umdf/receiver/src/sequencer.cpp:
        * libs/umdf/receiver/test/test_header_interpreter.cpp:
        * libs/umdf/receiver/test/test_sequencer.cpp:
        * msi/umdf/receiver/event_handler.hpp:
        * msi/umdf/receiver/header_interpreter.hpp:
        * msi/umdf/receiver/invalid_header_exception.hpp:
        * msi/umdf/receiver/receiver_machine.hpp:
        * msi/umdf/receiver/sequencer.hpp:

          Removed these files.

Tue Aug 26 23:21:11 UTC 2014 Luiz Siqueira <indiosmo@gmail.com>

        * libs/msi.mwc:

          Change ticker_plant path.

        * msi/network/multicast_sender.hpp:
        * libs/network/src/multicast_sender.cpp:

          Use unsigned char instead of char as the first parameter of send().

        * libs/network/test/test_multicast.cpp:

          Cast char to unsigned before calling multicast_sender::send().

        * msi/byte_conversion.hpp:

          Add uint16_to_be() function.

        * libs/umdf/ticker_plant/:
        * msi/umdf/ticker_plant/:

          ticker_plant_server is now just ticker_plant.

        * msi/marketdata/common/receiver.hpp:

          Remove unused on_receive() function.

        * msi/umdf/decoder/quickfast/umdf_decoder_quickfast_pch.hpp:

          Add BOOST_MPL defines to the precompiled header, otherwise we get
          a redefinition error when including classes that use MPL.

Thu Aug 14 03:07:08 UTC 2014 Luiz Siqueira <indiosmo@gmail.com>

        * msi/marketdata/common/security_list.hpp:
        * libs/marketdata/common/src/security_list.cpp:

          Generalized security list container.

        * libs/marketdata/common/build/marketdata_common_test.mpc:
        * libs/marketdata/common/test:
        * libs/marketdata/common/test/main.cpp:
        * libs/marketdata/common/test/test_marketdata_common.cpp:

          Tests for security_list class.

        * msi/umdf/ticker_plant/server/ticker_plant.hpp:
        * libs/umdf/ticker_plant/server/src/ticker_plant.cpp:

          Ticker plant is now a dumb forwarder.

          It has no knowledge of the security list and no longer does
          any filtering.

          Messages are received, decoded, serialized and forwarded to
          all connected parties.

        * libs/umdf/ticker_plant/server/test/test_ticker_plant.cpp:

          Remove old test. This class is now just a stub, still needs to
          be implemented.

        * libs/umdf/ticker_plant/server/src/dispatcher.cpp:
        * libs/umdf/ticker_plant/server/src/instrument.cpp:
        * libs/umdf/ticker_plant/server/src/request_handler.cpp:
        * libs/umdf/ticker_plant/server/src/security_list.cpp:
        * libs/umdf/ticker_plant/server/src/subscriber.cpp:
        * libs/umdf/ticker_plant/server/src/tcp_subscriber.cpp:
        * msi/umdf/ticker_plant/server/dispatcher.hpp:
        * msi/umdf/ticker_plant/server/instrument.hpp:
        * msi/umdf/ticker_plant/server/request_handler.hpp:
        * msi/umdf/ticker_plant/server/security_list.hpp:
        * msi/umdf/ticker_plant/server/subscriber.hpp:
        * msi/umdf/ticker_plant/server/tcp_subscriber.hpp:

          Removed these files. No longer used in the new ticker_plant model.

Thu Aug 14 01:19:13 UTC 2014 Luiz Siqueira <indiosmo@gmail.com>

        * libs/concepts/src/test_template_handler.cpp:

          Proof of concept for a generic message handler.

          The handler is useful for dispatchers where multiple message
          types are dispatched in the same way, with the only difference
          being the target function.

Fri Aug  8 01:22:30 UTC 2014 Luiz Siqueira <indiosmo@gmail.com>

        * msi/event.hpp:
        * msi/event_handler.hpp:

          Template classes for defining events and callbacks instead of
          manually defining via std::function typedefs.

        * msi/services.hpp:

          Define enum message_offset. Indicates offsets for message header
          fields that apply globally.

        * libs/umdf/ticker_plant/messages/
        * msi/umdf/ticker_plant/messages:

          New project, defines messages for the ticker_plant service.

        * libs/msi.mwc:

          Add ticker_plant/messages project.

        * libs/umdf/ticker_plant/server/build/umdf_ticker_plant_server.mpc:

          Add dependency on umdf_ticker_plant_messages.

        * msi/umdf/ticker_plant/server/request_handler.hpp:
        * libs/umdf/ticker_plant/server/src/request_handler.cpp:

          Implement handlers for the newly defined messages.

          Implement events for on_subscribe and on_unsubscribe.

        * msi/umdf/ticker_plant/server/subscriber.hpp:

          Update send_service_message to include the service message type.

        * msi/umdf/ticker_plant/server/tcp_subscriber.hpp:
        * libs/umdf/ticker_plant/server/src/tcp_subscriber.cpp:
        * libs/umdf/ticker_plant/server/test/test_ticker_plant.cpp:

          Reflect changes to subscriber interface.

        * libs/umdf/ticker_plant/server/src/ticker_plant.cpp:

          Register request_handler's callbacks with dispatcher.

Wed Jul 30 00:52:49 UTC 2014 Luiz Siqueira <indiosmo@gmail.com>

        * msi/umdf/ticker_plant/server/umdf_ticker_plant_server_export.hpp:

          Forgot to include in previous commit.

Wed Jul 30 00:08:30 UTC 2014 Luiz Siqueira <indiosmo@gmail.com>

        * libs/umdf/ticker_plant/client:
        * libs/umdf/ticker_plant/messages:
        * libs/umdf/ticker_plant/serialization:
        * libs/umdf/ticker_plant/server:
        * msi/umdf/ticker_plant/server:

          Divide ticker plant into its components.

        * msi/umdf/ticker_plant:
        * libs/umdf/ticker_plant:

          Move contents into ticker_plant/server

        * libs/msi.mwc:

          Reflect changes to ticker_plant project.

        * msi/protocols.hpp:
        * msi/services.hpp:
        * msi/network/tcp/connection.hpp:
        * libs/network/src/tcp/connection.cpp:

          Rename protocol to service.

Tue Jul 29 01:28:17 UTC 2014 Luiz Siqueira <indiosmo@gmail.com>

        * libs/marketdata/serialization/tools/header.xslt:
        * libs/marketdata/serialization/tools/source.xslt:
        * msi/marketdata/serialization/*.hpp:
        * libs/marketdata/serialization/src/*.cpp:

          Remove message type information from serialized data.
          Serializer contains only the message's data.
          Envelopes are to be handled by the client.

        * msi/protocols.hpp:

          Header for defining protocol types.

        * msi/network/tcp/connection.hpp:
        * libs/network/src/tcp/connection.cpp:

          Add write() function that takes a vector of buffers as argument.

          Add a write function that takes protocol and message type information
          as arguments and encodes it in an envelope around the message data.

        * msi/umdf/ticker_plant/subscriber.hpp:

          Break send() into two functions, one for marketdata messages and
          one for ticker plant protocol messages.

        * msi/umdf/ticker_plant/tcp_subscriber.hpp:
        * libs/umdf/ticker_plant/src/tcp_subscriber.cpp:

          Implement send_marketdata_message() and send_protocol_message().

          Each calls connection::write() with the appropriate protocol and
          message type.

        * libs/umdf/ticker_plant/src/instrument.cpp:

          Replace send() calls with send_marketdata_message() and passing
          the appropriate message type.

        * msi/umdf/ticker_plant/request_handler.hpp:
        * libs/umdf/ticker_plant/src/request_handler.cpp:

          Class for handling requests received from the client.

        * msi/umdf/ticker_plant/ticker_plant.hpp:
        * libs/umdf/ticker_plant/src/ticker_plant.cpp:

          Add tcp::server member.

          Handle tcp::server::on_connection by instantiating a tcp_subscriber.
          Hook connection::on_read to the request_handler.
          Hook connection::on_disconnect to handler that removes all of the
          subscriber's active subscriptions.

        * libs/umdf/ticker_plant/test/test_ticker_plant.cpp:

Mon Jul 28 22:44:04 UTC 2014 Luiz Siqueira <indiosmo@gmail.com>

        * libs/marketdata/messages/tools/generate_message_types.bat:
        * libs/marketdata/messages/tools/message_types.xslt:
        * libs/marketdata/serialization/tools/header.xslt:
        * libs/marketdata/serialization/tools/source.xslt:
        * msi/marketdata/serialization/*.hpp:
        * libs/marketdata/serialization/src/*.cpp:

          Add message type information to the beginning of the serialized data.

        * msi/umdf/ticker_plant/dispatcher.hpp:
        * msi/umdf/ticker_plant/instrument.hpp:
        * msi/umdf/ticker_plant/subscriber.hpp:
        * msi/umdf/ticker_plant/tcp_subscriber.hpp:
        * libs/umdf/ticker_plant/src/instrument.cpp:
        * libs/umdf/ticker_plant/src/tcp_subscriber.cpp:
        * libs/umdf/ticker_plant/test/test_ticker_plant.cpp:

          Remove message_type argument from send() function.
          Message type information is now contained in the serialized data.

        * msi/marketdata/messages/message_type.hpp:
        * msi/marketdata/messages/message_types.hpp:

          Rename message_type.hpp to message_types.hpp

Tue Jul 22 01:50:26 UTC 2014 Luiz Siqueira <indiosmo@gmail.com>

        * libs/umdf/ticker_plant/build/umdf_ticker_plant_test.mpc:
        * libs/umdf/ticker_plant/test:
        * libs/umdf/ticker_plant/test/main.cpp:
        * libs/umdf/ticker_plant/test/test_ticker_plant.cpp:

          Unit tests for ticker plant.

        * msi/umdf/ticker_plant/subscriber.hpp:

          Add message type argument to send().

        * libs/umdf/ticker_plant/src/instrument.cpp:
        * msi/umdf/ticker_plant/tcp_subscriber.hpp:
        * libs/umdf/ticker_plant/src/tcp_subscriber.cpp:

          Comply with new subscriber::send() signature.

        * msi/marketdata/messages/message_type.hpp:

          Add snapshot.

Tue Jul 22 00:40:22 UTC 2014 Luiz Siqueira <indiosmo@gmail.com>

        * libs/umdf/ticker_plant/build/umdf_ticker_plant.mpc:

          Add dependencies network and marketdata_serialization.

        * msi/umdf/ticker_plant/dispatcher.hpp:
        * libs/umdf/ticker_plant/src/dispatcher.cpp:

          Implement default constructor.

          Dispatch message to security_list when handling security definition.

        * msi/umdf/ticker_plant/instrument.hpp:
        * libs/umdf/ticker_plant/src/instrument.cpp:

          Add serializer members and uncomment serialize calls in handlers.

        * msi/umdf/ticker_plant/security_list.hpp:
        * libs/umdf/ticker_plant/src/security_list.cpp:

          Handle security definition without group.

        * msi/umdf/ticker_plant/subscriber.hpp:
        * libs/umdf/ticker_plant/src/subscriber.cpp:

          Subscriber is now an interface, send() is virtual.

        * msi/umdf/ticker_plant/tcp_subscriber.hpp:
        * libs/umdf/ticker_plant/src/tcp_subscriber.cpp:

          Composition of a tcp_connection and a subscriber.

          Implements send() as a call to tcp::connection::write().

        * msi/umdf/ticker_plant/ticker_plant.hpp:
        * libs/umdf/ticker_plant/src/ticker_plant.cpp:

          Implement default constructor.

        * msi/marketdata/common/decoder.hpp:
        * msi/marketdata/common/receiver.hpp:

          Typedef shared pointer of class.

        * msi/marketdata/serialization/serializers.hpp:

          Convenience header for including all serializers.

Mon Jul 21 23:02:39 UTC 2014 Luiz Siqueira <indiosmo@gmail.com>

        * libs/marketdata/message_definitions.xml:
        * libs/marketdata/messages/tools/generate_messages.bat:
        * libs/marketdata/messages/tools/header.xslt:
        * libs/marketdata/messages/tools/source.xslt:
        * msi/marketdata/messages/*.hpp:
        * msi/marketdata/serialization/*.hpp:
        * libs/marketdata/messages/src/*.cpp:
        * libs/marketdata/serialization/src/*.cpp:
        * libs/marketdata/serialization/test/test_serializer_performance.cpp:
        * libs/marketdata/serialization/test/test_serializers.cpp:
        * libs/marketdata/serialization/tools/generate_serializers.bat:
        * libs/marketdata/serialization/tools/header.xslt:
        * libs/marketdata/serialization/tools/source.xslt:
        * libs/marketdata/serialization/tools/tests.xslt:

          Add reference field type to message definitions.

          Update message definitions.

          Define snapshot message.

          Generate messages, serializers and tests.

Fri Jul 11 02:43:57 UTC 2014 Luiz Siqueira <indiosmo@gmail.com>

        * msi/marketdata/common/decoder.hpp:
        * libs/marketdata/common/src/decoder.cpp:

          Add protected callback members.

          Implement callback registration.

        * libs/umdf/adapter/build/umdf_adapter.mpc:

          Add boost base project.

          Use umdf decoder's pch.

        * msi/umdf/adapter/adapter.hpp:
        * libs/umdf/adapter/src/adapter.cpp:

          Move implementation to cpp file.

        * libs/umdf/adapter/test:
        * libs/umdf/adapter/test/adapter_test.cpp:
        * libs/umdf/adapter/test/main.cpp:
        * libs/umdf/adapter/build/umdf_adapter_test.mpc:

          Unit tests for umdf adapter.

Fri Jul 11 01:35:54 UTC 2014 Luiz Siqueira <indiosmo@gmail.com>

        * libs/marketdata/message_defintions.xml:

          Remove entry_date and entry_time from security_status.

        * libs/umdf/adapter/build/umdf_adapter.mpc:

          Add qfast project base.

        * libs/umdf/messages/tools/generate_messages.bat:
        * libs/umdf/messages/tools/header.xslt:
        * libs/umdf/messages/tools/source.xslt:
        * msi/umdf/messages/*.hpp:
        * libs/umdf/messages/src/*.cpp:

          New message definitions and updated generators.

        * libs/umdf/decoder/quickfast/tools/builder_cpp.xslt:
        * libs/umdf/decoder/quickfast/tools/builder_test.xslt:
        * libs/umdf/decoder/quickfast/tools/generate_builder.bat:
        * libs/umdf/decoder/quickfast/tools/generate_test.bat:
        * msi/umdf/decoder/quickfast/*.hpp:
        * libs/umdf/decoder/quickfast/src/*_builder.cpp:
        * libs/umdf/decoder/quickfast/test/*_builder_test.cpp:

          New builders to reflect changes to message definitions.

        * libs/umdf/messages/xml:
        * libs/umdf/messages/xml/*.xml:
        * libs/umdf/messages/xml/*_templates.xml:

          UMDF message definitions.

          _templates.xml files contain all templates used by the exchange
          in order to generate tests for all possible versions.

        * msi/umdf/adapter/adapter.hpp:

          Include export header.

        * setenv.bat:

          Include XSLT_ROOT variable and add its value to PATH.

Tue Jul  8 04:00:05 UTC 2014 Luiz Siqueira <indiosmo@gmail.com>

        * libs/marketdata/serialization/test/test_serializer_performance.cpp:

          Performance tests for serializers.

Tue Jul  8 03:28:51 UTC 2014 Luiz Siqueira <indiosmo@gmail.com>

        * msi/decimal/decimal.hpp:

          Implement comparison and ostream operators.

        * libs/marketdata/serialization/build/marketdata_serialization_test.mpc:
        * libs/marketdata/serialization/test:
        * libs/marketdata/serialization/test/main.cpp:
        * libs/marketdata/serialization/test/test_serializers.cpp:

          Unit test project for serializers.

        * libs/marketdata/messages/tools/field_values.xslt:
        * libs/marketdata/messages/tools/header.xslt:
        * libs/marketdata/messages/tools/source.xslt:

          Bug fixes.

        * msi/marketdata/messages/*.hpp:
        * libs/marketdata/messages/src/*.cpp:

          Update message definitions with new model.

        * libs/marketdata/serialization/tools/header.xslt:
        * libs/marketdata/serialization/tools/source.xslt:
        * libs/marketdata/serialization/tools/tests.xslt:

          Bug fixes.

        * msi/marketdata/serialization/*.hpp:
        * libs/marketdata/serialization/src/*.cpp:

          Update serializers with new model.

        * msi/umdf/decoder/quickfast/umdf_decoder_quickfast_pch.hpp:
        * msi/msi_pch.hpp:

          Move ignore warning 4996 from quickfast_pch to msi_pch.

        * msi/print_util.hpp:

          Set width and fill before each cout.


Tue Jul  1 00:49:53 UTC 2014 Luiz Siqueira <indiosmo@gmail.com>

        * libs/marketdata/message_defintions.xml:

          Message definitions.

        * libs/marketdata/messages/tools/field_values.xslt:
        * libs/marketdata/messages/tools/generate_field_values.bat:
        * libs/marketdata/messages/tools/generate_messages.bat:
        * libs/marketdata/messages/tools/header.xslt:
        * libs/marketdata/messages/tools/source.xslt:

          Tools for generating message classes from definition template.

        * msi/marketdata/messages/*.hpp:
        * libs/marketdata/messages/src/*.cpp:

          Generated message classes.

        * msi/marketdata/serialization/sequence_serializer.hpp:

          Utility functions for serializing sequence fields.

        * msi/marketdata/serialization/string_serializer.hpp:
        * libs/marketdata/serialization/src/string_serializer.cpp:

          Utility functions for serializing string fields.

        * msi/marketdata/serialization/*.hpp:
        * libs/marketdata/serialization/src/*.cpp:

          Generated serializer classes.

        * libs/marketdata/serialization/tools:
        * libs/marketdata/serialization/tools/generate_serializers.bat:
        * libs/marketdata/serialization/tools/header.xslt:
        * libs/marketdata/serialization/tools/source.xslt:

          Tools for generating serializers from message definition templates.

        * msi/byte_conversion.hpp:

          Utility function for converting to/from byte arrays.

        * libs/marketdata/messages/xml:

          Removed this file.

Mon Jun 30 21:46:15 UTC 2014 Luiz Siqueira <indiosmo@gmail.com>

        * libs/marketdata/messages/tools:
        * libs/marketdata/messages/xml:

          XML message definitions and code generation tools.

        * msi/marketdata/serialization:
        * libs/marketdata/serialization:
        * libs/marketdata/serialization/build:
        * libs/marketdata/serialization/build/marketdata_serialization.mpc:
        * libs/marketdata/serialization/src:

          Marketdata message serialization library.

        * msi/umdf/adapter:
        * msi/umdf/adapter/adapter.hpp:
        * msi/umdf/adapter/umdf_adapter_export.hpp:
        * libs/umdf/adapter:
        * libs/umdf/adapter/build:
        * libs/umdf/adapter/build/umdf_adapter.mpc:
        * libs/umdf/adapter/src:
        * libs/umdf/adapter/src/adapter.cpp:

          Adapter that converts UMDF messages to Marketdata Messages.

        * libs/msi.mwc:

          Add marketdata serialization library.

          Add umdf adapter library.

        * libs/umdf/messages/xml:

          UMDF message definitions.

        * msi/byte_conversion.hpp:

          Byte conversion utilities.

        * msi/print_util.hpp:

          Print utilities.

        * resources/message_definitions:

          Moved to project specific directory.

Fri Jun  6 02:49:08 UTC 2014 Luiz Siqueira <indiosmo@gmail.com>

        * libs/umdf/ticker_plant/build/umdf_ticker_plant.mpc:

          Lib definition.

        * libs/umdf/ticker_plant/src/ticker_plant.cpp:

          Fix formatting.

Fri Jun  6 02:40:56 UTC 2014 Luiz Siqueira <indiosmo@gmail.com>

        * libs/umdf/receiver/build/umdf_receiver.mpc:

          Include marketdata_common


        * msi/marketdata/messages/security_status.hpp:
        * libs/marketdata/messages/src/security_status.cpp:

          Add security_group field.


        * msi/marketdata/messages/message_type.hpp:

          Message type enumeration.


        * msi/umdf/ticker_plant:
        * libs/umdf/ticker_plant:

          ticker_plant lib.

        * msi/marketdata/common:
        * libs/marketdata/common:

          Common interfaces and classes for marketdata libs and services.

        * msi/marketdata/decoder.hpp:
        * msi/marketdata/receiver.hpp:

          Moved into marketdata/common.

        * msi/umdf/receiver/receiver.hpp:
        * libs/umdf/receiver/src/receiver.cpp:

          Implement marketdata::receiver interface.

        * libs/marketdata/ticker_plant/*:
        * msi/marketdata/ticker_plant/*:

          Project moved into umdf/ticker_plant.

        * libs/msi.mwc:

          Add marketdata_common and umdf_ticker_plant projects.

Thu Jun  5 02:24:51 UTC 2014 Luiz Siqueira <indiosmo@gmail.com>

        * msi/marketdata/messages/messages.hpp:

          Convenience header for including all message headers.

        * msi/marketdata/receiver.hpp:

          Receiver interface.

        * msi/marketdata/decoder.hpp:

          Decoder interface.

        * msi/marketdata/ticker_plant/security_list.hpp:

          Fix type in include guard.

        * msi/marketdata/ticker_plant/ticker_plant.hpp:
        * libs/marketdata/ticker_plant/src/ticker_plant.cpp:

          Ticker plant abstraction.

Thu May 29 03:35:38 UTC 2014 Luiz Siqueira <indiosmo@gmail.com>

        * msi/marketdata/ticker_plant:
        * libs/marketdata/ticker_plant:

          New library. Abstracts the entire marketdata pipeline:
          receive multicast -> decode -> publish.

        * libs/msi.mwc:

          Add new library ticker_plant.

Thu May 29 01:46:47 UTC 2014 Luiz Siqueira <indiosmo@gmail.com>

        * libs/marketdata/messages/*:
        * msi/marketdata/messages/*:

          New library. Defines marketdata messages.

        * libs/msi.mwc:

          Add new library.

        * msi/byte_conversion.hpp:

          Byte array conversion functions.

Tue May 27 03:01:40 UTC 2014 Luiz Siqueira <indiosmo@gmail.com>

        * msi/umdf/receiver/sequencer.hpp:
        * libs/umdf/receiver/src/sequencer.cpp:

          Add initialization strategy parameter.

          init_on_message_received will initialize the sequence to the
          seqnum of the first received message.

          init_on_seqnum_one will wait until a message is received with
          seqnum equal to one.

        * msi/umdf/receiver/receiver_machine.hpp:
        * libs/umdf/receiver/src/receiver_machine.cpp:

          Add a gap handling strategy to reset to zero on gap timeout.

          Break constructor in two, with and without a recovery service.

          Add sequencer init strategy to constructors.

        * msi/umdf/receiver/event_handler.hpp:
        * libs/umdf/receiver/src/event_handler.cpp:

          Add sequencer init strategy to constructors.

        * msi/umdf/receiver/receiver.hpp:
        * libs/umdf/receiver/src/receiver.cpp:

          Add sequencer init strategy to constructors.

          Replace multicast_receiver members with a vector of receivers.
          multicast_receivers are added to the receiver via the
          add_multicast_channel() function.

          start() and stop() iterate the channels calling run and stop
          respectively in each multicast_receiver.

        * libs/umdf/receiver/test/test_event_handler_performance.cpp:
        * libs/umdf/receiver/test/test_sequencer.cpp:
        * libs/umdf/receiver/test/test_state_machine.cpp:

          Update tests to reflect recent changes.

        * msi/umdf/receiver/null_recovery_service.hpp:

          Nop implementation of a recovery service.

        * libs/umdf/receiver/src/recover_service.cpp:
        * libs/umdf/receiver/src/recovery_service.cpp:

          Renamed recover* to recovery*.

Wed May 21 02:25:54 UTC 2014 Luiz Siqueira <indiosmo@gmail.com>

        * libs/concepts/src/test_quickfast.cpp:

          Remove decoder.reset() call.

        * msi/umdf/decoder/quickfast/decoder.hpp:
        * libs/umdf/decoder/quickfast/src/decoder.cpp:

          API for decoder. Encapsulates all builders.

        * libs/umdf/decoder/quickfast/test/decoder_test.cpp:

          Test decoder class.


        * msi/umdf/messages/message_type.hpp:
        * libs/umdf/messages/src/message_type.cpp:

          Fix variable names to comply with convention.

        * libs/umdf/ticker_plant/*:
        * msi/umdf/ticker_plant/*:

          Removed project.

Tue May 20 02:19:45 UTC 2014 Luiz Siqueira <indiosmo@gmail.com>

        * libs/network/src/tcp/client.cpp:
        * libs/network/src/tcp/connection.cpp:
        * msi/network/tcp/client.hpp:
        * msi/network/tcp/connection.hpp:

          Remove call to socket::shutdown when closing the connection.
          socket::is_open() can return true even if the socket is not
          actually open, resulting in an exception when shutdown is called.

          Initialize disconnected_ to true.

          Rename header_ to read_header_ and add a write_header_ member.

          Encode header inside write() call and perform gather-write to write
          both header and data in a single async_write.

Tue May 20 01:55:09 UTC 2014 Luiz Siqueira <indiosmo@gmail.com>

        * libs/network/src/tcp/client.cpp:
        * libs/network/src/tcp/connection.cpp:

          Call shutdown on socket only if it is open.

Tue May 20 01:37:39 UTC 2014 Luiz Siqueira <indiosmo@gmail.com>

        * msi/network/tcp/connection.hpp:
        * libs/network/src/tcp/client.cpp:
        * libs/network/src/tcp/connection.cpp:
        * libs/network/src/tcp/server.cpp:

          Check if already stopped/disconnected before closing sockets and
          if true then ignore the stop/disconnect command.

        * libs/network/test/test_tcp.cpp:

          Start/Stop server and client twice to make sure no resources
          are leaking.

Tue May 20 01:27:29 UTC 2014 Luiz Siqueira <indiosmo@gmail.com>

        * libs/network/build/network.mpc:
        * libs/network/src/tcp:
        * libs/network/src/tcp/client.cpp:
        * libs/network/src/tcp/connection.cpp:
        * libs/network/src/tcp/connection_manager.cpp:
        * libs/network/src/tcp/header.cpp:
        * libs/network/src/tcp/server.cpp:
        * libs/network/test/test_tcp.cpp:
        * msi/network/tcp:
        * msi/network/tcp/client.hpp:
        * msi/network/tcp/connection.hpp:
        * msi/network/tcp/connection_manager.hpp:
        * msi/network/tcp/header.hpp:
        * msi/network/tcp/server.hpp:

          Generic TCP server and client.

Sat May 17 03:59:39 UTC 2014 Luiz Siqueira <indiosmo@gmail.com>

        * libs/umdf/decoder/quickfast/src/news_builder.cpp:
        * libs/umdf/decoder/quickfast/src/security_list_builder.cpp:
        * libs/umdf/decoder/quickfast/src/security_status_builder.cpp:
        * libs/umdf/decoder/quickfast/src/snapshot_builder.cpp:
        * libs/umdf/decoder/quickfast/test/news_builder_test.cpp:
        * libs/umdf/decoder/quickfast/test/security_list_builder_test.cpp:
        * libs/umdf/decoder/quickfast/test/security_status_builder_test.cpp:
        * libs/umdf/decoder/quickfast/test/snapshot_builder_test.cpp:
        * libs/umdf/messages/src/message_type.cpp:
        * libs/umdf/messages/src/news.cpp:
        * libs/umdf/messages/src/security_list.cpp:
        * libs/umdf/messages/src/security_status.cpp:
        * libs/umdf/messages/src/snapshot.cpp:
        * msi/umdf/decoder/quickfast/news_builder.hpp:
        * msi/umdf/decoder/quickfast/security_list_builder.hpp:
        * msi/umdf/decoder/quickfast/security_status_builder.hpp:
        * msi/umdf/decoder/quickfast/snapshot_builder.hpp:
        * msi/umdf/messages/message_type.hpp:
        * msi/umdf/messages/news.hpp:
        * msi/umdf/messages/security_list.hpp:
        * msi/umdf/messages/security_status.hpp:
        * msi/umdf/messages/snapshot.hpp:
        * resources/message_definitions/news.xml:
        * resources/message_definitions/news_templates.xml:
        * resources/message_definitions/security_list.xml:
        * resources/message_definitions/security_list_templates.xml:
        * resources/message_definitions/security_status.xml:
        * resources/message_definitions/security_status_templates.xml:
        * resources/message_definitions/snapshot.xml:
        * resources/message_definitions/snapshot_templates.xml:

          New messages.

Sat May 17 02:53:40 UTC 2014 Luiz Siqueira <indiosmo@gmail.com>

        * libs/umdf/decoder/quickfast/src/heartbeat_builder.cpp:
        * libs/umdf/decoder/quickfast/test/heartbeat_builder_test.cpp:
        * libs/umdf/messages/src/heartbeat.cpp:
        * msi/umdf/decoder/quickfast/heartbeat_builder.hpp:
        * msi/umdf/decoder/quickfast/umdf_decoder_quickfast_pch.hpp:
        * msi/umdf/messages/heartbeat.hpp:
        * resources/message_definitions/heartbeat.xml:
        * resources/message_definitions/heartbeat_templates.xml:

          Extend heartbeat definition to include all templates.

Sat May 17 02:41:46 UTC 2014 Luiz Siqueira <indiosmo@gmail.com>

        * msi/umdf/decoder/quickfast/builder_selector.hpp:
        * libs/umdf/decoder/quickfast/src/builder_selector.cpp:

          Handle case where ApplVerId is received before receiving MsgType.

        * msi/umdf/decoder/quickfast/heartbeat_builder.hpp:
        * msi/umdf/decoder/quickfast/incremental_builder.hpp:
        * msi/umdf/decoder/quickfast/sequence_reset_builder.hpp:
        * libs/umdf/decoder/quickfast/src/heartbeat_builder.cpp:
        * libs/umdf/decoder/quickfast/src/incremental_builder.cpp:
        * libs/umdf/decoder/quickfast/src/sequence_reset_builder.cpp:

          New builders.

        * libs/umdf/decoder/quickfast/test/heartbeat_builder_test.cpp:
        * libs/umdf/decoder/quickfast/test/incremental_builder_test.cpp:
        * libs/umdf/decoder/quickfast/test/sequence_reset_builder_test.cpp:

          Tests for new builders.

        * libs/umdf/decoder/quickfast/tools:
        * libs/umdf/decoder/quickfast/tools/builder_cpp.xslt:
        * libs/umdf/decoder/quickfast/tools/builder_hpp.xslt:
        * libs/umdf/decoder/quickfast/tools/builder_test.xslt:
        * libs/umdf/decoder/quickfast/tools/generate_builder.bat:
        * libs/umdf/decoder/quickfast/tools/generate_test.bat:

          Tools used to generate builders and tests from FAST templates.

        * msi/umdf/messages/heartbeat.hpp:
        * msi/umdf/messages/incremental.hpp:
        * msi/umdf/messages/sequence_reset.hpp:
        * libs/umdf/messages/src/heartbeat.cpp:
        * libs/umdf/messages/src/incremental.cpp:
        * libs/umdf/messages/src/sequence_reset.cpp:

          New messages.

        * libs/umdf/messages/tools/generate_messages.bat:
        * libs/umdf/messages/tools/header.xslt:
        * libs/umdf/messages/tools/source.xslt:

          Tools used to generate messages from FAST templates.

        * resources/message_definitions:
        * resources/message_definitions/heartbeat.xml:
        * resources/message_definitions/incremental.xml:
        * resources/message_definitions/incremental_templates.xml:
        * resources/message_definitions/news.xml:
        * resources/message_definitions/security_list.xml:
        * resources/message_definitions/security_status.xml:
        * resources/message_definitions/sequence_reset.xml:
        * resources/message_definitions/snapshot.xml:

          Templates to be used with the generators.

Fri May 16 23:08:06 UTC 2014 Luiz Siqueira <indiosmo@gmail.com>

        * libs/concepts/src/test_quickfast.cpp:

          Reflect changes to resources path.

        * resources:
        * resources/templates-PUMA.xml:
        * resources/templates-UMDF-NTP.xml:

          New directory for centralizing resources.

        * libs/concepts/resources:
        * libs/concepts/resources/templates-PUMA.xml:
        * libs/concepts/resources/templates-UMDF-NTP.xml:

          Removed these files.

Fri May 16 23:03:22 UTC 2014 Luiz Siqueira <indiosmo@gmail.com>

        * libs/umdf/decoder/quickfast/build/umdf_decoder_quickfast_test.mpc:

          Fix includes.

        * libs/umdf/decoder/quickfast/src/incremental_builder.cpp:
        * libs/umdf/decoder/quickfast/src/incremental_mdentry_builder.cpp:
        * libs/umdf/decoder/quickfast/src/incremental_mdentry_underlying_builder.cpp:
        * libs/umdf/decoder/quickfast/src/sequence_reset_builder.cpp:
        * libs/umdf/decoder/quickfast/test/test_incremental_builder.cpp:
        * libs/umdf/decoder/quickfast/test/test_sequence_reset_builder.cpp:
        * libs/umdf/messages/src/incremental.cpp:
        * libs/umdf/messages/src/incremental_mdentry.cpp:
        * libs/umdf/messages/src/incremental_mdentry_underlying.cpp:
        * libs/umdf/messages/src/sequence_reset.cpp:
        * msi/umdf/decoder/quickfast/incremental_builder.hpp:
        * msi/umdf/decoder/quickfast/incremental_mdentry_builder.hpp:
        * msi/umdf/decoder/quickfast/incremental_mdentry_underlying_builder.hpp:
        * msi/umdf/decoder/quickfast/sequence_reset_builder.hpp:
        * msi/umdf/messages/incremental.hpp:
        * msi/umdf/messages/incremental_mdentry.hpp:
        * msi/umdf/messages/incremental_mdentry_underlying.hpp:
        * msi/umdf/messages/sequence_reset.hpp:

          Removed these files.

Mon May 12 23:35:34 UTC 2014 Luiz Siqueira <indiosmo@gmail.com>

        * libs/umdf/messages/tools:
        * libs/umdf/messages/tools/field_id_cpp.xslt:
        * libs/umdf/messages/tools/field_id_hpp.xslt:
        * libs/umdf/messages/tools/field_id_xml.xslt:
        * libs/umdf/messages/tools/generate_field_ids.bat:
        * libs/umdf/messages/tools/header.xslt:
        * libs/umdf/messages/tools/source.xslt:

          XSLT files for generating UMDF messages from templates.

        * msi/umdf/messages/field_id.hpp:
        * msi/umdf/messages/incremental.hpp:
        * msi/umdf/messages/incremental_mdentry.hpp:
        * msi/umdf/messages/incremental_mdentry_underlying.hpp:
        * msi/umdf/messages/message_type.hpp:
        * msi/umdf/messages/sequence_reset.hpp:
        * libs/umdf/messages/src/field_id.cpp:

          field_id class generated using generate_field_ids.bat script.

        * msi/umdf/messages/umdf_messages_export.hpp:
        * libs/umdf/messages/build/umdf_messages.mpc:

          Rename macros to correct project name UMDF_MESSAGES instead of
          MESSAGES.


        * msi/decimal:
        * msi/decimal/decimal.hpp:

          Decimal class, composed of a mantissa and a base 10 exponent.
          Meant for transport only, does not support operations.

        * libs/umdf/decoder/quickfast/src/builder_selector.cpp:
        * libs/umdf/decoder/quickfast/src/incremental_builder.cpp:
        * libs/umdf/decoder/quickfast/src/incremental_mdentry_builder.cpp:
        * libs/umdf/decoder/quickfast/src/incremental_mdentry_underlying_builder.cpp:
        * libs/umdf/decoder/quickfast/src/sequence_reset_builder.cpp:
        * libs/umdf/decoder/quickfast/test/test_sequence_reset_builder.cpp:

          Reflect changes to export macros and field_id names.

Thu May  8 00:53:24 UTC 2014 Luiz Siqueira <indiosmo@gmail.com>

          Move umdf/decoder into umdf/decoder/quickfast.

Wed May  7 01:25:09 UTC 2014 Luiz Siqueira <indiosmo@gmail.com>

        * msi/umdf/messages/incremental.hpp:
        * libs/umdf/messages/src/incremental.cpp:

          Incremental message.

        * msi/umdf/decoder/incremental_builder.hpp:
        * msi/umdf/decoder/incremental_mdentry_builder.hpp:
        * msi/umdf/decoder/incremental_mdentry_underlying_builder.hpp:
        * libs/umdf/decoder/src/incremental_builder.cpp:
        * libs/umdf/decoder/src/incremental_mdentry_builder.cpp:
        * libs/umdf/decoder/src/incremental_mdentry_underlying_builder.cpp:

          New builder for incremental messages.

        * libs/umdf/decoder/test/test_incremental_builder.cpp:

          Test for new incremental builder.

        * msi/umdf/decoder/sequence_reset_builder.hpp:
        * libs/umdf/decoder/src/sequence_reset_builder.cpp:

          Fix include guard name.

          Fix tradeDate type.

        * libs/umdf/decoder/test/test_sequence_reset_builder.cpp:

          Rename suite to suite_sequence_reset_builder.

Tue May  6 00:25:16 UTC 2014 Luiz Siqueira <indiosmo@gmail.com>

        * msi/umdf/messages/field_id.hpp:
        * libs/umdf/messages/src/field_id.cpp:

          Add field ids.

        * libs/umdf/messages/src/incremental.cpp:
        * libs/umdf/messages/src/incremental_mdentry.cpp:
        * libs/umdf/messages/src/incremental_mdentry_underlying.cpp:
        * msi/umdf/messages/incremental.hpp:
        * msi/umdf/messages/incremental_mdentry.hpp:
        * msi/umdf/messages/incremental_mdentry_underlying.hpp:

          New message definitions.

        * msi/umdf/messages/sequence_reset.hpp:
        * libs/umdf/messages/src/sequence_reset.cpp:

          Coding style changes.

Thu May  1 22:31:35 UTC 2014 Luiz Siqueira <indiosmo@gmail.com>

        * libs/umdf/decoder/test/test_sequence_reset_builder.cpp:

          Add performance test.

Thu May  1 22:09:07 UTC 2014 Luiz Siqueira <indiosmo@gmail.com>

        * msi/umdf/decoder/umdf_decoder_pch.hpp:

          Disable warning 4275.

        * msi/umdf/decoder/builder.hpp:
        * libs/umdf/decoder/src/builder.cpp:

          Implement QuickFAST ValueMessageBuilder interface.

        * msi/umdf/decoder/builder_selector.hpp:
        * libs/umdf/decoder/src/builder_selector.cpp:

          Top level builder that selects specialized builders based on message
          type.

        * msi/umdf/decoder/sequence_reset_builder.hpp:
        * libs/umdf/decoder/src/sequence_reset_builder.cpp:

          Implement endMessage(). If a callback is registered, call it.

        * libs/umdf/decoder/test/test_sequence_reset_builder.cpp:

          Test full builder, from top level builder_selector.

        * msi/umdf/messages/field_id.hpp:
        * libs/umdf/messages/src/field_id.cpp:

          Use a typedef for field ids instead of using string directly.

        * msi/umdf/messages/message_type.hpp:
        * libs/umdf/messages/src/message_type.cpp:

          Message types.

Sun Apr 27 19:57:20 UTC 2014 Luiz Siqueira <indiosmo@gmail.com>

        Change class names to comply with standard library naming style.

Thu Apr 24 03:36:45 UTC 2014 Luiz Siqueira <indiosmo@gmail.com>

        Update #include directives in all headers and sources to match the
        new directory structure.

Thu Apr 24 02:30:27 UTC 2014 Luiz Siqueira <indiosmo@gmail.com>

        Changes to directory structure, as well as project and file names
        to comply with Boost guidelines.

        * libs:

          Contains source files, build scripts, documentation and resources
          for projects.

        * msi:

          Contains headers for projects.

        * mpc:
        * msi.mwc:
        * src:

          Removed these files.

Wed Apr 23 03:43:06 UTC 2014 Luiz Siqueira <indiosmo@gmail.com>

        * msi.mwc:

          Add UmdfDecoderQuickfastTest project.

        * src/Umdf/Decoder/Quickfast/Builder.h:
        * src/Umdf/Decoder/Quickfast/SetterBase.h:

          Export class to DLL.

        * src/Umdf/Decoder/Quickfast/SequenceResetBuilder.h:
        * src/Umdf/Decoder/Quickfast/SequenceResetBuilder.cpp:

          Export class to DLL.

          Add callback to be called when a message is available.

          Add get_message() function to aid with unit testing.

        * src/Umdf/Messages/SequenceReset.cpp:

          Set flag in presence map on the field setters.

        * src/UmdfDecoderQuickfastTest.mpc:
        * src/Umdf/Decoder/Quickfast/Test:
        * src/Umdf/Decoder/Quickfast/Test/main.cpp:
        * src/Umdf/Decoder/Quickfast/Test/testSequenceResetBuilder.cpp:

          Unit tests for UmdfDecoderQuickfast lib.

Tue Apr 15 02:20:33 UTC 2014 Luiz Siqueira <indiosmo@gmail.com>

        * msi.mwc:

          Add new projets UmdfDecoderQuickfast and UmdfMessages.

        * src/Concepts/sandbox.cpp:

          Sandbox for testing new concepts.

        * src/UmdfDecoderQuickfast_pch.cpp:
        * src/UmdfDecoderQuickfast.mpc:
        * src/UmdfDecoderQuickfast_pch.h:
        * src/Umdf/Decoder:
        * src/Umdf/Decoder/Quickfast:
        * src/Umdf/Decoder/Quickfast/Builder.h:
        * src/Umdf/Decoder/Quickfast/Builder.cpp:
        * src/Umdf/Decoder/Quickfast/DecoderQuickfast_Export.h:
        * src/Umdf/Decoder/Quickfast/SequenceResetBuilder.h:
        * src/Umdf/Decoder/Quickfast/SequenceResetBuilder.cpp:
        * src/Umdf/Decoder/Quickfast/SetterBase.h:
        * src/Umdf/Decoder/Quickfast/Setter_t.h:

          New project for decoding FAST messages using QuickFAST.

        * src/UmdfMessages.mpc:
        * src/Umdf/Messages:
        * src/Umdf/Messages/FieldId.h:
        * src/Umdf/Messages/FieldId.cpp:
        * src/Umdf/Messages/Messages_Export.h:
        * src/Umdf/Messages/SequenceReset.h:
        * src/Umdf/Messages/SequenceReset.cpp:

          Umdf message definitions.

        * src/msi_pch.h:

          Add blank line at end of file.

Wed Apr  9 00:23:34 UTC 2014 Luiz Siqueira <indiosmo@gmail.com>

        * src/Umdf/Receiver/EventHandler.h:
        * src/Umdf/Receiver/EventHandler.cpp:
        * src/Umdf/Receiver/Receiver.h:
        * src/Umdf/Receiver/Receiver.cpp:
        * src/Umdf/Receiver/ReceiverMachine.h:

          Separate wiring from event handling logic.

          Receiver has MulticastReceivers, a HeaderInterpreter and an
          EventHandler and wires them all together.

        * src/Umdf/Receiver/Test/testStateMachine.cpp:

          Test EventHandler directly instead of Receiver.

        * src/Umdf/Receiver/Test/testReceiverPerformance.cpp:
        * src/Umdf/Receiver/Test/testEventHandlerPerformance.cpp:

          Renamed Receiver to EventHandler.

Sat Mar  8 10:22:49 UTC 2014 Luiz Siqueira <indiosmo@gmail.com>

        * .:

          svn:ignore bin directory.

        * src/Umdf/Receiver/Typedefs.h:
        * src/Umdf/Common:
        * src/Umdf/Common/Typedefs.h:

          Move Typedefs.h from Receiver to Common.

        * src/Concepts/testMoveSemantics.cpp:
        * src/Umdf/Receiver/Test/testHeaderInterpreter.cpp:
        * src/Umdf/Receiver/Test/testReceiverPerformance.cpp:
        * src/Umdf/Receiver/Test/testStateMachine.cpp:
        * src/Umdf/Receiver/Chunk.h:
        * src/Umdf/Receiver/Events.h:
        * src/Umdf/Receiver/Header.h:
        * src/Umdf/Receiver/ReceiverMachine.h:
        * src/Umdf/Receiver/RecoveryService.h:
        * src/Umdf/Receiver/Sequencer.h:

          Change Typedefs.h to include from Common instead of Receiver.

        * src/Umdf/TickerPlant:
        * src/Umdf/TickerPlant/Instrument.h:
        * src/Umdf/TickerPlant/Instrument.cpp:
        * src/Umdf/TickerPlant/MessageBase.h:
        * src/Umdf/TickerPlant/MessageType.h:
        * src/Umdf/TickerPlant/Publisher.h:
        * src/Umdf/TickerPlant/Publisher.cpp:
        * src/Umdf/TickerPlant/Subscriber.h:
        * src/Umdf/TickerPlant/Subscriber.cpp:
        * src/Umdf/TickerPlant/SubscriptionManager.h:
        * src/Umdf/TickerPlant/SubscriptionManager.cpp:
        * src/Umdf/TickerPlant/main.cpp:
        * src/UmdfTickerPlant.mpc:

          New project for ticker plant.

        * msi.mwc:

          Add UmdfTickerPlant.mpc.

Fri Feb 21 02:09:40 UTC 2014 Luiz Siqueira <indiosmo@gmail.com>

        * src/Concepts/resources:
        * src/Concepts/resources/templates-PUMA.xml:
        * src/Concepts/resources/templates-UMDF-NTP.xml:

          Resources used in testQuickFast.

        * src/Concepts/StrandConnector:
        * src/Concepts/StrandConnector/testQuickFast.cpp:
        * src/Concepts/StrandConnector/testStrandConnector.cpp:
        * src/Concepts/testQuickFast.cpp:
        * src/Concepts/testStrandConnector.cpp:

          Remove StrandConnector directory and move files one level down.

        * src/Concepts.mpc:

          Reflect file moves.

Fri Feb 21 02:00:14 UTC 2014 Luiz Siqueira <indiosmo@gmail.com>

        * mpc/msi.features:

          Cleared unused features.

        * mpc/qfast.mpb:

          New base for projects that depend on QuickFAST.

        * setenv.bat:

          Add XERCES_ROOT and QUICKFAST_ROOT variables.

          Add Xerces and QuickFAST libs to PATH.

        * src/Concepts.mpc:

          Include qfast base.

        * src/Concepts/StrandConnector/testQuickFast.cpp:

          Test decoder performance.

        * src/Concepts/testFlatSetHint.cpp:

          Removed wrong comment.

Thu Feb 13 00:09:02 UTC 2014 Luiz Siqueira <indiosmo@gmail.com>

        * .:

          svn:ignore profiling files.

        * src/Concepts/testFlatSetHint.cpp:
        * src/Concepts/testMoveSemantics.cpp:

          Measure performance in messages per second.

        * src/Umdf/Receiver/Test/testStateMachine.cpp:

          Replace new with std::make_unique when instantiating asio work.

        * src/Umdf/Receiver/Test/testReceiverPerformance.cpp:

          Test end to end performance of the receiver.

Mon Feb 10 23:01:52 UTC 2014 Luiz Siqueira <indiosmo@gmail.com>

        * src/Umdf/Receiver/Events.h:

          Add name() function to events. Returns event name.

        * src/Umdf/Receiver/ReceiverMachine.h:
        * src/Umdf/Receiver/ReceiverMachine.cpp:

          Fix initialization list error where recovery_service_ was being
          initialized with itself.

          Add logger.

          Log on unknown transition.

          Clear assembly queue when single chunk is published.

          Add on_error_t callback and call it from ta_reset_on_failure().

          Remove transitions from st_recovery to st_gap to avoid stack
          overflow when there are no messages incoming.

        * src/Umdf/Receiver/RecoveryService.h:
        * src/Umdf/Receiver/RecoveryService.cpp:

          Move implementation to cpp file.

        * src/Umdf/Receiver/Sequencer.cpp:

          Reset expected chunk_ when a single chunk message is sequenced.

        * src/Umdf/Receiver/Test/testSequencer.cpp:

          Remove empty test.

        * src/Umdf/Receiver/Test/testStateMachine.cpp:

          Implement tests for st_recovery transitions.

Fri Feb  7 01:28:23 UTC 2014 Luiz Siqueira <indiosmo@gmail.com>

        * src/Umdf/Receiver/Events.h:

          New RecoveryStatus values.

        * src/Umdf/Receiver/Receiver.h:
        * src/Umdf/Receiver/Receiver.cpp:

          Implement recovery handling functions.

          Bind RecoveryService callbacks to handlers in Receiver.

        * src/Umdf/Receiver/ReceiverMachine.h:

          Remove redundant handle_recovery_timeout function.

        * src/Umdf/Receiver/RecoveryService.h:

          Add enums for ack types, report types, and errors.

          Add callback members for ack, data and report.

        * src/Umdf/Receiver/Test/testStateMachine.cpp:

          Implement send_ack, send_data and send_report in the mock
          RecoveryService.

Fri Feb  7 00:42:28 UTC 2014 Luiz Siqueira <indiosmo@gmail.com>

        * src/Umdf/Receiver/RecoveryService.h:

          Interface for recovery service implementations.

        * src/Umdf/Receiver/ReceiverMachine.h:
        * src/Umdf/Receiver/ReceiverMachine.cpp:

          Add channel and RecoveryService members which are passed to the
          constructor.

          Implement request_replay().

        * src/Umdf/Receiver/Receiver.h:
        * src/Umdf/Receiver/Receiver.cpp:

          Take channel and RecoveryService in the constructor and use them to
          construct the ReceiverMachine.

        * src/Umdf/Receiver/Test/testStateMachine.cpp:

          Add mock RecoveryServer.

          Construct receivers with empty channel and mock RecoveryReceiver.

Wed Feb  5 01:44:35 UTC 2014 Luiz Siqueira <indiosmo@gmail.com>

        * src/Umdf/Receiver/Test/testStateMachine.cpp:

          Run io_service in test_Transitions so that timer completions are
          notified.

          Test st_gap to st_recovery transition by means of sleeping in order
          for the gap timer to expire.

Wed Feb  5 01:01:02 UTC 2014 Luiz Siqueira <indiosmo@gmail.com>

        * src/Umdf/Receiver/ReceiverMachine.h:
        * src/Umdf/Receiver/ReceiverMachine.cpp:

          handle_gap_timeout and handle_recovery_timeout are now template
          functions taking a reference to the FSM type as a parameter. This
          allows us to bind async_wait directly to our member functions,
          eliminating the need for calling back to Receiver just so that it
          could call back into ReceiverMachine.

          Make Receiver a friend class.

          Remove register_on_message_received_callback() member function since
          Receiver is a friend now and can set the callback variable directly.

        * src/Umdf/Receiver/Receiver.h:
        * src/Umdf/Receiver/Receiver.cpp:

          Remove handle_gap_timeout and handle_recovery_timeout functions.

          Set the callback member variable in ReceiverMachine directly in
          register_on_message_received_callback.

Wed Jan 29 02:04:18 UTC 2014 Luiz Siqueira <indiosmo@gmail.com>

        * src/Umdf/Receiver/Events.h:
        * src/Umdf/Receiver/Events.cpp:

          Remove ev_stale_* and ev_ordered_multi_last.

        * src/Umdf/Receiver/Receiver.cpp:

          Ignore stale packets.

        * src/Umdf/Receiver/ReceiverMachine.h:
        * src/Umdf/Receiver/ReceiverMachine.cpp:

          Remove transitions for ev_stale* and ev_ordered_multi_last.

          Separate queue into two: one for pending assembly of sequenced chunks
          and one for out of order chunks.

        * src/Umdf/Receiver/Sequencer.cpp:

          Fix bug where receiving the first chunk on an uninitialized sequencer
          would not return Sequenced and fall through, returning OutOfOrder.

          Fix bug where after receiving the first chunk on an unititialized
          sequencer the next chunks would return stale by defining
          unititialized as both seqnum and chunk equal to zero, as opposed to
          only seqnum being zero.

        * src/Umdf/Receiver/Test/testStateMachine.cpp:

          Add tests for ordered and unordered assembly of multi chunk messages.

          Change comments to reflect new transitions.

          Fix test that was checking for the wrong sequence number.

        * src/Umdf/Receiver/Assembler.h:
        * src/Umdf/Receiver/Assembler.cpp:
        * src/Umdf/Receiver/Test/testAssembler.cpp:

          Removed these files. Assembly now done directly inside the state
          machine.

Fri Jan 24 03:44:52 UTC 2014 Luiz Siqueira <indiosmo@gmail.com>

        * src/Umdf/Receiver/Events.h:
        * src/Umdf/Receiver/Events.cpp:

          Add ev_reset.

          Add Export clause to event declarations.

        * src/Umdf/Receiver/Receiver.h:
        * src/Umdf/Receiver/Receiver.cpp:

          Initialize receivers with a loopback address for testing.

          Add reset member function.

          Add state() getter.

        * src/Umdf/Receiver/ReceiverMachine.h:
        * src/Umdf/Receiver/ReceiverMachine.cpp:

          Add get_state() function for retrieving the state machine's current
          state.

          reset() now takes seqnum_t argument.

          Add ev_reset transitions.

          Logic changes to process_queue and transitions table.

        * src/Umdf/Receiver/Sequencer.cpp:

          sequence() now tests for stale chunks in addition to seqnum.

        * src/Umdf/Receiver/Test/testStateMachine.cpp:

          Unit tests for the Receiver and ReceiverMachine.

Thu Jan 23 21:23:55 UTC 2014 Luiz Siqueira <indiosmo@gmail.com>

        * src/Umdf/Receiver/Test/testAssembler.cpp:

          Add messages to queue out of order to test ordering.

Thu Jan 23 21:15:54 UTC 2014 Luiz Siqueira <indiosmo@gmail.com>

        * src/Umdf/Receiver/Events.h:
        * src/Umdf/Receiver/Events.cpp:

          Add enum RecoveryStatus.

          ev_recovery_failed has member RecoveryStatus and is constructed with
          one.

        * src/Umdf/Receiver/Receiver.h:
        * src/Umdf/Receiver/Receiver.cpp:

          Initialize state_machine_ with io_service.

          Add timer async handlers for gap and replay timeout.

          Raise timeout events for the state machine to process in the timeout
          handlers.

        * src/Umdf/Receiver/ReceiverMachine.h:
        * src/Umdf/Receiver/ReceiverMachine.cpp:

          Moved non-template member functions to implementation file.

          Add timers. Start timers on Gap and Recovery entry and cancel timers
          on Exit.

          Timer handlers callback to a registered function.

Thu Jan 23 00:42:39 UTC 2014 Luiz Siqueira <indiosmo@gmail.com>

        * src/Umdf/Receiver/Receiver.cpp:

          Formatting changes.

Thu Jan 23 00:38:56 UTC 2014 Luiz Siqueira <indiosmo@gmail.com>

        * src/Umdf/Receiver/Events.h:
        * src/Umdf/Receiver/Events.cpp:

          Defines events for the sequencing state machine.

        * src/Umdf/Receiver/ReceiverMachine.h:
        * src/Umdf/Receiver/ReceiverMachine.cpp:

          State machine that coordinates the sequencing and recovery process.

        * src/Umdf/Receiver/Receiver.h:
        * src/Umdf/Receiver/Receiver.cpp:

          Raise events for the state machine upon receiving messages.

Wed Jan 22 23:26:02 UTC 2014 Luiz Siqueira <indiosmo@gmail.com>

        * src/*.mpc:
          Shared libraries now follow naming convention msi_<lib>.

        * src/Umdf/UmdfReceiver:
        * src/Umdf/Receiver:

          Moved UmdfReceiver to Receiver.

          Change Receiver library namespace to apoena::msi::umdf::receiver.

Wed Jan 22 00:20:18 UTC 2014 Luiz Siqueira <indiosmo@gmail.com>

        * src/Umdf/UmdfReceiver/Assembler.h:
        * src/Umdf/UmdfReceiver/Assembler.cpp:

          Assemble [first, last) instead of [first, last].

        * src/Umdf/UmdfReceiver/Test/testAssembler.cpp:

          Reflect changes to Assembler.h.

Tue Jan 21 22:19:48 UTC 2014 Luiz Siqueira <indiosmo@gmail.com>

        * src/Umdf/UmdfReceiver/Assembler.h:
        * src/Umdf/UmdfReceiver/Assembler.cpp:

          No need for class Assembler. assemble(...) is now a free-standing
          function in namespace apoena::msi::umdf::assembler.

        * src/Umdf/UmdfReceiver/Test/testAssembler.cpp:

          Reflect changes to Assembler.h.

Tue Jan 21 02:19:28 UTC 2014 Luiz Siqueira <indiosmo@gmail.com>

        * src/Umdf/UmdfReceiver/Chunk.h:
        * src/Umdf/UmdfReceiver/Chunk.cpp:

          Replaces Message as the data representation. Includes chunk
          information.

        * src/Concepts/testFlatSetHint.cpp:
        * src/Concepts/testMoveSemantics.cpp:

          Use Chunk instead of Message.

        * src/Umdf/UmdfReceiver/Assembler.h:
        * src/Umdf/UmdfReceiver/Assembler.cpp:

          Assembler is now a single static function that takes a range of
          iterators to a set of Chunks and assembles them into a single Chunk.

        * src/Umdf/UmdfReceiver/Sequencer.h:
        * src/Umdf/UmdfReceiver/Sequencer.cpp:

          Sequence chunks as well as sequence numbers.

        * src/Umdf/UmdfReceiver/Test/testAssembler.cpp:

          Reflect changes to Assembler class.

        * src/Umdf/UmdfReceiver/Test/testSequencer.cpp:

          Reflect changes to Sequencer class.

        * src/Umdf/UmdfReceiver/UmdfReceiver.h:
        * src/Umdf/UmdfReceiver/UmdfReceiver.cpp:

          Handle both single and multi chunk in the same function.

          Delete old logic, will implement the state machine in the future.

        * src/Umdf/UmdfReceiver/ChunkContainer.h:
        * src/Umdf/UmdfReceiver/ChunkContainer.cpp:
        * src/Umdf/UmdfReceiver/Message.h:
        * src/Umdf/UmdfReceiver/Message.cpp:

          Removed these files.

Mon Jan 20 22:59:20 UTC 2014 Luiz Siqueira <indiosmo@gmail.com>

        * src/Umdf/UmdfReceiver/Typedefs.h:

          Consolidate UmdfReceiver typedefs in this header.

        * src/Concepts/testMoveSemantics.cpp:
        * src/Umdf/UmdfReceiver/Assembler.h:
        * src/Umdf/UmdfReceiver/ChunkContainer.h:
        * src/Umdf/UmdfReceiver/Header.h:
        * src/Umdf/UmdfReceiver/Message.h:
        * src/Umdf/UmdfReceiver/Sequencer.h:

          Use the new Typedefs.h header.

        * src/Umdf/UmdfReceiver/Chunk.h:
        * src/Umdf/UmdfReceiver/DataLength.h:
        * src/Umdf/UmdfReceiver/Seqnum.h:

          Removed these files.

Sat Jan 18 00:44:57 UTC 2014 Luiz Siqueira <indiosmo@gmail.com>

        * src/Concepts.mpc:

          Add reference to Network and UmdfReceiver.

        * src/Concepts/testFlatSetHint.cpp:

          Test performance difference when providing hint or not.

        * src/Concepts/testMoveSemantics.cpp:

          Test move semantics and emplace performance.

        * src/Umdf/UmdfReceiver/Message.h:
        * src/Umdf/UmdfReceiver/Message.cpp:

          Implement copy and move constructors and assignments,

        * src/Umdf/UmdfReceiver/UmdfReceiver.cpp:

          Remove todo comments.

Fri Jan 17 22:53:40 UTC 2014 Luiz Siqueira <indiosmo@gmail.com>

        * src/Concepts/StrandConnector/testStrandConnector.cpp:

          Add comments to clarify what a Strand Connector is.

        * src/Network/MulticastReceiver.h:
        * src/Network/MulticastReceiver.cpp:

          io_service now injected instead of member.

          buffer_size(size) returns bool indicating wheter the buffer was
          successfuly resized.

          Rename run() to start().

          Change SO_RCVBUF to 1<<19.


        * src/Network/MulticastSender.h:
        * src/Network/MulticastSender.cpp:

          io_service now injected instead of member.

          Remove run() and stop().

        * src/Network/Test/testMulticast.cpp:

          Update test to reflect changes to MulticastReceiver and
          MulticastSender.

        * src/Umdf/UmdfReceiver/UmdfReceiver.h:
        * src/Umdf/UmdfReceiver/UmdfReceiver.cpp:

          Take io_service& in constructor and use it to construct the
          receivers.

Fri Jan 17 02:48:36 UTC 2014 Luiz Siqueira <indiosmo@gmail.com>

        * msi.mwc:

          Add UmdfReceiverTest project.

        * src/Umdf/UmdfReceiver/HeaderInterpreter.cpp:

          Remove redundant parentheses from ntohx calls.

        * src/Umdf/UmdfReceiver/Sequencer.h:

          Add getter for seqnum_.

        * src/UmdfReceiverTest.mpc:
        * src/Umdf/UmdfReceiver/Test:
        * src/Umdf/UmdfReceiver/Test/main.cpp:
        * src/Umdf/UmdfReceiver/Test/testAssembler.cpp:
        * src/Umdf/UmdfReceiver/Test/testHeaderInterpreter.cpp:
        * src/Umdf/UmdfReceiver/Test/testSequencer.cpp:

          Unit tests for UmdfReceiver library.


Thu Jan 16 22:39:29 UTC 2014 Luiz Siqueira <indiosmo@gmail.com>

        * src/Network/MulticastReceiver.cpp:
        * src/Network/MulticastSender.cpp:

          Log completion handler error only if not operation_aborted.

Thu Jan 16 00:42:45 UTC 2014 Luiz Siqueira <indiosmo@gmail.com>

        * src/Umdf/UmdfReceiver/Assembler.h:
        * src/Umdf/UmdfReceiver/Assembler.cpp:

          Receives chunks and stores them. When all chunks are received
          assembles them into a single buffer and raises on_message.

        * src/Umdf/UmdfReceiver/ChunkContainer.h:
        * src/Umdf/UmdfReceiver/ChunkContainer.cpp:

          Used by Assembler to keep track of chunks and store data.

        * src/Umdf/UmdfReceiver/UmdfReceiver.h:
        * src/Umdf/UmdfReceiver/UmdfReceiver.cpp:

          Complete wiring.

Mon Jan 13 23:31:46 UTC 2014 Luiz Siqueira <indiosmo@gmail.com>

        * src/Umdf/UmdfReceiver/Message.h:
        * src/Umdf/UmdfReceiver/Message.cpp:

          Used for storing out of sequence messages.

        * src/Umdf/UmdfReceiver/UmdfReceiver.h:
        * src/Umdf/UmdfReceiver/UmdfReceiver.cpp:

          If message is not sequenced, store into a flat_set.

          process_queue() iterates the queue and calls on_message_received
          for every sequenced message, deleting them from the queue after.

Fri Jan 10 01:44:17 UTC 2014 Luiz Siqueira <indiosmo@gmail.com>

        * src/Umdf/UmdfReceiver/Sequencer.h:
        * src/Umdf/UmdfReceiver/Sequencer.cpp:

          Initialize seqnum_ to zero.

          Remove callbacks. Sequencer::sequence() now returns one of three
          states: Sequenced, OutOfOrder or Stale.

        * src/Umdf/UmdfReceiver/UmdfReceiver.h:
        * src/Umdf/UmdfReceiver/UmdfReceiver.cpp:

          Delete copy constructor and assign.

          Receive single chunk messages from HeaderInterpreter, sequence using
          Sequencer and output them via on_message_received_ callback.


Thu Jan  9 23:18:27 UTC 2014 Luiz Siqueira <indiosmo@gmail.com>

        * src/Network/MulticastReceiver.h:
        * src/Network/MulticastReceiver.cpp:
        * src/Network/MulticastSender.h:
        * src/Network/MulticastSender.cpp:
        * src/Network/Test/testMulticast.cpp:
        * src/Umdf/UmdfReceiver/HeaderInterpreter.h:
        * src/Umdf/UmdfReceiver/HeaderInterpreter.cpp:
        * src/Umdf/UmdfReceiver/Sequencer.h:
        * src/Umdf/UmdfReceiver/Sequencer.cpp:

          Replace network::buffer_t with unsigned char*.

        * src/Network/Buffer.h:
        * src/Network/Datagram.h:
        * src/Network/Datagram.cpp:
        * src/Network/DatagramSequencer.h:
        * src/Network/DatagramSequencer.cpp:
        * src/Network/Seqnum.h:
        * src/Network/Test/testSequencer.cpp:

          Removed these files.

Thu Jan  9 22:59:19 UTC 2014 Luiz Siqueira <indiosmo@gmail.com>

        * src/Logging/Logger.h:

          Move LoggerPtr typedef after class declaration.

        * src/Umdf/UmdfReceiver/Sequencer.h:
        * src/Umdf/UmdfReceiver/Sequencer.cpp:

          Class for sequencing umdf messages base on a sequence number.

Thu Jan  9 22:40:58 UTC 2014 Luiz Siqueira <indiosmo@gmail.com>

        * src/Logging/ConsoleLogger.h:
        * src/Logging/ConsoleLoggerFactory.h:
        * src/Logging/FileLogger.h:
        * src/Logging/FileLoggerFactory.h:
        * src/Logging/Log.h:
        * src/Logging/Logger.h:
        * src/Logging/LoggerFactory.h:
        * src/Logging/NullLogger.h:
        * src/Network/DatagramSequencer.h:
        * src/Network/MulticastReceiver.h:
        * src/Network/MulticastSender.h:
        * src/Umdf/UmdfReceiver/HeaderInterpreter.h:

          Remove redundant explicit delete of move constructor and assign since
          we already delete copy constructor and assign.

Thu Jan  9 22:30:59 UTC 2014 Luiz Siqueira <indiosmo@gmail.com>

        * src/Umdf/UmdfReceiver/Header.h:
        * src/Umdf/UmdfReceiver/InvalidHeaderException.h:
        * src/Umdf/UmdfReceiver/UmdfReceiver.h:

          Change include guard to conform to style NAMESPACE_FILE_H.

        * src/Umdf/UmdfReceiver/HeaderInterpreter.h:

          Change include guard to conform to style NAMESPACE_FILE_H.

          Delete copy and move constructors.

Thu Jan  9 22:13:25 UTC 2014 Luiz Siqueira <indiosmo@gmail.com>

        * .:

          svn:ignore .swo files.

        * src/Logging/Logger.h:

          Typedef shared_ptr<Logger> as LoggerPtr.

        * src/Network/MulticastReceiver.h:
        * src/Network/MulticastSender.h:

          Use LoggerPtr instead of explicitly declaring shared_ptr<Logger>.

        * src/Umdf/UmdfReceiver/InvalidHeaderException.h:

          Exception to be thrown when there is a problem with a message header.

        * src/Umdf/UmdfReceiver/HeaderInterpreter.h:
        * src/Umdf/UmdfReceiver/HeaderInterpreter.cpp:

          Add a Logger member.

          When comparing buffer size to header size, discount offset.
          Throw InvalidHeaderException if buffer is smaller than header size.

          Sum offset to buffer index when retrieving header fields.

          Catch InvalidHeaderException in the extract loop, log and break.

Thu Jan  9 02:26:48 UTC 2014 Luiz Siqueira <indiosmo@gmail.com>

        * msi.mwc:

          Add UmdfReceiver project.

        * src/Umdf:
        * src/UmdfReceiver.mpc:
        * src/Umdf/UmdfReceiver/*:

          This new module abstracts the UMDF message receiving pipeline.
          Receives raw multicast traffic and outputs sequenced UMDF messages.


Fri Dec 20 23:11:28 UTC 2013 Luiz Siqueira <indiosmo@gmail.com>

        * src/Network/DatagramSequencer.cpp:

          Ignore stale packets.

        * src/Network/Test/testSequencer.cpp:

          Test for stale packets.

Thu Dec 19 02:35:01 UTC 2013 Luiz Siqueira <indiosmo@gmail.com>

        * src/Logging/Log.cpp:

          Instantiate NullLogger with level None to avoid formatting.

        * src/Network/Datagram.cpp:

          Copy buffer from begin() to begin()+size instead of copying the
          entire buffer.

        * src/Network/DatagramSequencer.h:
        * src/Network/DatagramSequencer.cpp:

          Add seqnum to the signature on_sequenced_callback's signature.

        * src/Network/Test/testMulticast.cpp:

          Change suite name from suiteNetwork to suiteMulticast.

        * src/Network/Test/testSequencer.cpp:

          DatagramSequencer tests.

Thu Dec 19 01:50:42 UTC 2013 Luiz Siqueira <indiosmo@gmail.com>

        * src/Logging/ConsoleLogger.h:
        * src/Logging/ConsoleLoggerFactory.h:
        * src/Logging/FileLogger.h:
        * src/Logging/FileLoggerFactory.h:
        * src/Logging/Log.h:
        * src/Logging/Logger.h:
        * src/Logging/LoggerFactory.h:
        * src/Logging/NullLogger.h:

          Delete all copy and move constructors and operators.

        * src/Network/Buffer.h:
        * src/Network/Seqnum.h:

          Common typedefs in the apoena::msi::network namespace.

        * src/Network/Datagram.h:
        * src/Network/Datagram.cpp:

          Sequence/buffer pair that represents a datagram.

        * src/Network/DatagramSequencer.h:
        * src/Network/DatagramSequencer.cpp:

          Contains sequencing state and a Datagram queue to store out of order
          packets.

        * src/Network/MulticastReceiver.h:
        * src/Network/MulticastReceiver.cpp:
        * src/Network/MulticastSender.h:
        * src/Network/MulticastSender.cpp:
        * src/Network/Test/testMulticast.cpp:

          Delete all copy and move constructors and operators.

          Use typedef headers.


Tue Dec 17 00:53:32 UTC 2013 Luiz Siqueira <indiosmo@gmail.com>

        * src/Network/Test/testMulticast.cpp:

          Add performance test.

Tue Dec 17 00:40:29 UTC 2013 Luiz Siqueira <indiosmo@gmail.com>

        * src/Concepts/StrandConnector/testStrandConnector.cpp:

          Include <iostream>

        * src/Logging/Test/testLogging.cpp:

          Add performance test.

Thu Dec 12 02:30:58 UTC 2013 Luiz Siqueira <indiosmo@gmail.com>

        * src/Concepts/StrandConnector/testStrandConnector.cpp:

          Added a bind to lambda test.

Thu Dec 12 02:15:33 UTC 2013 Luiz Siqueira <indiosmo@gmail.com>

        * msi.mwc:

          Add project Concepts.

        * src/Concepts:
        * src/Concepts.mpc:
        * src/Concepts/main.cpp:

          Sandbox project for testing out design and implementation concepts.

        * src/Concepts/StrandConnector:
        * src/Concepts/StrandConnector/testStrandConnector.cpp:

          Test boost::asio::strand::post behavior and viability a connector.

        * src/Network/Test/testMulticast.cpp:

          Add newline to the end of the file.

Wed Dec 11 22:45:36 UTC 2013 Luiz Siqueira <indiosmo@gmail.com>

        * src/Logging/Severity.h:

          Add severity None.

        * src/Network/MulticastReceiver.cpp:

          Don't run() if already running and don't stop() if not running.

          Reset io_service before running instead of when stopping.

        * src/Network/MulticastSender.h:
        * src/Network/MulticastSender.cpp:

          Don't run() if already running and don't stop() if not running.

          Initialize work on run() instead of constructor.

        * src/Network/Test/testMulticast.cpp:

          Add MockNetworkPipeline struct to coordinate the test and store
          state for checking.

Tue Dec 10 23:29:11 UTC 2013 Luiz Siqueira <indiosmo@gmail.com>

        * src/Network/MulticastReceiver.h:
        * src/Network/MulticastReceiver.cpp:

          Typedef buffer type and callback function for when a datagram
          is received.

          Call on_receive_callback when a datagram is received.

        * src/Network/MulticastSender.h:
        * src/Network/MulticastSender.cpp:

          Typedef buffer type and callback function for when a datagram
          is sent.

          Call on_send_callback when a datagram is sent.

Tue Dec 10 21:41:21 UTC 2013 Luiz Siqueira <indiosmo@gmail.com>

        * src/Network/Test/testMulticast.cpp:

          Send a packet, sleep 500ms to allow for time to populate the ARP
          cache, then send the rest of the packets without waiting.

Tue Dec 10 21:32:20 UTC 2013 Luiz Siqueira <indiosmo@gmail.com>

        * src/Logging/ConsoleLogger.h:
        * src/Logging/ConsoleLogger.cpp:
        * src/Logging/ConsoleLoggerFactory.h:
        * src/Logging/ConsoleLoggerFactory.cpp:
        * src/Logging/FileLogger.h:
        * src/Logging/FileLogger.cpp:
        * src/Logging/FileLoggerFactory.h:
        * src/Logging/FileLoggerFactory.cpp:
        * src/Logging/Log.cpp:
        * src/Logging/Logger.h:
        * src/Logging/Logger.cpp:
        * src/Logging/LoggerFactory.h:
        * src/Logging/NullLogger.h:
        * src/Logging/Severity.h:

          Move severity enum to its own header.

          Add severity to Logger and LoggerFactory constructor.

          When LoggerFactory constructs a Logger, pass the severity to it.

        * src/Logging/Test/testLogging.cpp:
        * src/Network/MulticastReceiver.cpp:
        * src/Network/MulticastSender.cpp:
        * src/Network/Test/testMulticast.cpp:

          Reflect changes in logging library.

Tue Dec 10 00:58:42 UTC 2013 Luiz Siqueira <indiosmo@gmail.com>

        * src/Network/MulticastReceiver.h:
        * src/Network/MulticastReceiver.cpp:

          New class for receiving multicast traffic.

        * src/Network/MulticastSender.cpp:

          Log write error and success at the appropriate severity levels.

        * src/Network/Test/testMulticastSender.cpp:
        * src/Network/Test/testMulticast.cpp:

          Rename testMulticastSender.cpp to testMulticast.cpp.

Mon Dec  9 22:43:36 UTC 2013 Luiz Siqueira <indiosmo@gmail.com>

        * src/Logging.mpc:

          Use boost.

        * src/Logging/ConsoleLogger.h:
        * src/Logging/ConsoleLogger.cpp:
        * src/Logging/ConsoleLoggerFactory.h:
        * src/Logging/ConsoleLoggerFactory.cpp:

          New logger implementation. Logs to cout.

        * src/Logging/Logger.h:
        * src/Logging/Logger.cpp:

          Use variadic templates and boost format.

          Test for severity before logging.

        * src/Logging/FileLogger.h:
        * src/Logging/FileLogger.cpp:
        * src/Logging/NullLogger.h:

          Reflect changes to Logger interface.

        * src/Logging/Test/testLogging.cpp:

          Add test_ConsoleLogger and test_Severity.

          Reflect changes to Logger interface.

        * src/Network.mpc:
        * src/Network/MulticastSender.h:
        * src/Network/MulticastSender.cpp:
        * src/Network/Test/testMulticastSender.cpp:

          Use logging library instead of writing directly to cout.

Fri Dec  6 11:02:15 UTC 2013 Luiz Siqueira <indiosmo@gmail.com>

        * msi.mwc:

          Add NetworkTest project.

        * src/Network/MulticastSender.h:
        * src/Network/MulticastSender.cpp:

          Receives a buffer and sends it over udp multicast.

        * src/NetworkTest.mpc:
        * src/Network/Test:
        * src/Network/Test/main.cpp:
        * src/Network/Test/testMulticastSender.cpp:

          Tests for Network library.

Fri Dec  6 01:23:44 UTC 2013 Luiz Siqueira <indiosmo@gmail.com>

        * .:

          svn:ignore.

        * msi.mwc:

          Add Network project.

        * src/msi_pch.h:

          Disable warning 4251.

        * src/Logging/FileLogger.h:
        * src/Logging/FileLoggerFactory.h:
        * src/Logging/Log.h:

          Remove pragma for disabling warning 4251, now done in the
          precompiled header.


Fri Dec  6 01:04:18 UTC 2013 Luiz Siqueira <indiosmo@gmail.com>

        * .:

          svn:ignore.

        * src/Logging.mpc:
        * src/Logging/FileLogger.h:
        * src/Logging/FileLoggerFactory.h:
        * src/Logging/Log.h:
        * src/Logging/Logger.h:
        * src/Logging/LoggerFactory.h:
        * src/Logging/Logging_export.h:
        * src/Logging/NullLogger.h:

          Use Logging_export.h file generated with MPC
          generate_export_header.pl script.


          Changed export macro in headers to the new name LOGGING_Export.

        * src/Network:
        * src/Network.mpc:
        * src/Network/Network_Export.h:

          Network library.

Fri Dec  6 00:42:39 UTC 2013 Luiz Siqueira <indiosmo@gmail.com>

        * etc/commit.bat:

          Added svnsync step.

        * setenv.bat:

          SVN_MIRROR_URL is https, not http.

Fri Dec  6 00:27:58 UTC 2013 Luiz Siqueira <indiosmo@gmail.com>

        * .:
        * src:

          svn:ignore.

        * etc:
        * etc/astyle-clean.bat:
        * etc/astyle.conf:
        * etc/commit.bat:

          Commit scripts.

        * setenv.bat:

          Set ASTYLE_ROOT, ACE_ROOT, GNUWIN_ROOT and SVN_MIRROR_URL


